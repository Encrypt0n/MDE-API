name: Flaky Test Detector

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run-tests-multiple-times:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        run: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Install Coverlet
        run: dotnet tool install --global coverlet.console

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-incremental

      - name: Run tests with coverage and trx log (Run ${{ matrix.run }})
        run: |
          coverlet ./MDE_API.Tests/bin/Debug/net8.0/MDE_API.Tests.dll \
            --target "dotnet" \
            --targetargs "test MDE_API.Tests/MDE_API.Tests.csproj --no-build --no-restore --logger \"trx;LogFileName=TestResults_${{ matrix.run }}.trx\"" \
            --format cobertura \
            --output ./TestResults/Coverage_${{ matrix.run }}.cobertura.xml

          

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-run-${{ matrix.run }}
          path: |
            **/TestResults/TestResults_${{ matrix.run }}.trx
            **/TestResults/Coverage_${{ matrix.run }}.cobertura.xml

  summarize-results:
    runs-on: ubuntu-latest
    needs: run-tests-multiple-times
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List all .trx files
        run: find ./artifacts -name "*.trx"

      - name: Install trx2junit
        run: |
          dotnet tool install --global trx2junit
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Convert .trx to .xml
        run: |
          for file in $(find ./artifacts -name "*.trx"); do
            trx2junit "$file"
          done

      - name: Merge and summarize coverage
        run: |
          mkdir coverage-merged
          reports=$(find ./artifacts -name "*.cobertura.xml" | paste -sd ';' -)
            if [ -z "$reports" ]; then
              echo "‚ùå No cobertura reports found."
              exit 1
            fi
          reportgenerator \
            -reports:"$reports" \
            -targetdir:coverage-merged

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage-merged/index.html



      - name: Print flaky test summary in log
        run: |
          echo "### Flaky Test Run Summary"
          totalRuns=0
          totalFailures=0
          for file in $(find . -name "TestResults_*.xml"); do
            runName=$(basename "$file" .xml)
            failures=$(grep -o "<failure>" "$file" | wc -l)
            echo "- $runName: $failures failures"
            totalRuns=$((totalRuns+1))
            totalFailures=$((totalFailures+failures))
          done
          echo "- Total Runs: $totalRuns"
          echo "- Total Failures: $totalFailures"

      - name: Show covered and uncovered public methods
        run: |
          echo "### üì£ Checking public method coverage from HTML report"
      
          if [ ! -f coverage-merged/index.html ]; then
            echo "‚ùå No merged coverage report found at coverage-merged/index.html"
            exit 1
          fi
      
          echo "‚úÖ Found coverage-merged/index.html"
      
          # Extract method names from index.html
          echo "üîç Extracting all method names..."
          grep -oP '<span class="method-name">\K[^<]+' coverage-merged/index.html | sort | uniq > all_methods.txt || true
          cat all_methods.txt || echo "‚ö†Ô∏è No methods found."
      
          echo "üîç Extracting uncovered methods (0%)..."
          grep -B3 '>0%<' coverage-merged/index.html | grep -oP '<span class="method-name">\K[^<]+' > uncovered_methods.txt || true
          cat uncovered_methods.txt || echo "‚ö†Ô∏è No uncovered methods found."
      
          # Check if files exist and fallback
          if [ ! -s all_methods.txt ]; then
            echo "‚ùå No methods found in report. Check HTML format."
            exit 1
          fi
      
          # Compute covered methods
          echo "üîç Calculating covered methods..."
          grep -Fvxf uncovered_methods.txt all_methods.txt > covered_methods.txt || true
          cat covered_methods.txt || echo "‚ö†Ô∏è No covered methods found."
      
          echo ""
          echo "### ‚úÖ Covered Public Methods:"
          cat covered_methods.txt || echo "None"
      
          echo ""
          echo "### ‚ùå Uncovered Public Methods:"
          cat uncovered_methods.txt || echo "None"
      
          total_methods=$(wc -l < all_methods.txt)
          uncovered_count=$(wc -l < uncovered_methods.txt)
      
          echo ""
          echo "üìä Coverage Summary:"
          echo "Total Methods: $total_methods"
          echo "Uncovered Methods: $uncovered_count"
      
          if [ "$uncovered_count" -gt 0 ]; then
            echo "‚ùå Some public methods are not covered by tests."
            exit 1
          else
            echo "üéâ All public methods are covered!"
          fi
