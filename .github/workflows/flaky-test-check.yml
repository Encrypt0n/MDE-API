name: Flaky Test Detector

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run-tests-multiple-times:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        run: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests with coverage and trx log (Run ${{ matrix.run }})
        run: >
          dotnet test
          --logger "trx;LogFileName=TestResults_${{ matrix.run }}.trx"
          /p:CollectCoverage=true
          /p:CoverletOutputFormat=cobertura
          /p:CoverletOutput=./TestResults/Coverage_${{ matrix.run }}

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-run-${{ matrix.run }}
          path: |
            **/TestResults/TestResults_${{ matrix.run }}.trx
            **/TestResults/Coverage_${{ matrix.run }}.cobertura.xml

  summarize-results:
    runs-on: ubuntu-latest
    needs: run-tests-multiple-times
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List all .trx files
        run: find ./artifacts -name "*.trx"

      - name: Install trx2junit
        run: |
          dotnet tool install --global trx2junit
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Convert .trx to .xml
        run: |
          for file in $(find ./artifacts -name "*.trx"); do
            trx2junit "$file"
          done

      - name: Merge and summarize coverage
        run: |
          mkdir coverage-merged
          reportgenerator \
            -reports:$(find ./artifacts -name "*.cobertura.xml" | tr '\n' ';') \
            -targetdir:coverage-merged \
            -reporttypes:TextSummary;Xml

      - name: Print flaky test summary in log
        run: |
          echo "### Flaky Test Run Summary"
          totalRuns=0
          totalFailures=0
          for file in $(find . -name "TestResults_*.xml"); do
            runName=$(basename "$file" .xml)
            failures=$(grep -o "<failure>" "$file" | wc -l)
            echo "- $runName: $failures failures"
            totalRuns=$((totalRuns+1))
            totalFailures=$((totalFailures+failures))
          done
          echo "- Total Runs: $totalRuns"
          echo "- Total Failures: $totalFailures"

      - name: Show uncovered public methods
        run: |
          echo "### 📣 Checking uncovered public methods"
          if [ ! -f coverage-merged/Summary.xml ]; then
            echo "❌ No merged coverage report found"
            exit 1
          fi

          # Parse coverage XML and extract methods with 0% coverage
          echo "Uncovered methods:" > uncovered.txt
          grep -oP '<Method .*?name="\K[^"]+' coverage-merged/Summary.xml | sort | uniq > all_methods.txt
          grep -B1 '<Coverage>0</Coverage>' coverage-merged/Summary.xml | grep '<Method ' | grep -oP 'name="\K[^"]+' > uncovered_methods.txt

          echo "" && echo "### 🚫 Uncovered Methods:" && cat uncovered_methods.txt

          uncovered_count=$(wc -l < uncovered_methods.txt)
          total_methods=$(wc -l < all_methods.txt)

          echo "" && echo "📊 Coverage Summary:"
          echo "Total Methods: $total_methods"
          echo "Uncovered Methods: $uncovered_count"

          if [ "$uncovered_count" -gt 0 ]; then
            echo "❌ Some public methods are not covered by tests."
            exit 1
          else
            echo "🎉 All public methods are covered!"
          fi
