name: Flaky Test Detector

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run-tests-multiple-times:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        run: [1, 2, 3, 4, 5]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests with coverage (Run ${{ matrix.run }})
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage_${{ matrix.run }}


      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-run-${{ matrix.run }}
          path: '**/TestResults/*.trx'

  summarize-results:
    runs-on: ubuntu-latest
    needs: run-tests-multiple-times
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List all .trx files
        run: find ./artifacts -name "*.trx"

      - name: Install trx2junit
        run: dotnet tool install --global trx2junit

      - name: Convert .trx to .xml
        run: |
          for file in $(find ./artifacts -name "*.trx"); do
            trx2junit "$file"
          done

      - name: Display flaky test summary in Actions log
        run: |
          echo ""
          echo "============================="
          echo "üß™ Flaky Test Run Summary"
          echo "============================="
          totalRuns=0
          totalFailures=0
          for file in $(find . -name "TestResults_*.xml"); do
            failures=$(grep -o "<failure>" "$file" | wc -l)
            echo "‚Ä¢ ${file##*/}: $failures failure(s)"
            totalRuns=$((totalRuns+1))
            totalFailures=$((totalFailures+failures))
          done
          echo "-----------------------------"
          echo "‚úÖ Total Runs: $totalRuns"
          echo "‚ùå Total Failures: $totalFailures"
          echo "============================="

  assert-public-methods-tested:
    runs-on: ubuntu-latest
    needs: run-tests-multiple-times

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build main project
        run: dotnet build ./YourMainProject.csproj -c Release

      - name: Run public method test coverage check
        run: |
          dotnet new console -n CoverageCheckerApp
          cd CoverageCheckerApp
          cat > Program.cs <<EOF
          using System;
          using System.Linq;
          using System.Reflection;
          using System.Xml.Linq;

          class Program
          {
              static void Main()
              {
                  var assembly = Assembly.LoadFrom("../MDE_API/bin/Release/net8.0/MDE_API.dll");
                  var publicMethods = assembly.GetTypes()
                      .Where(t => t.IsPublic && !t.IsAbstract && !t.IsInterface)
                      .SelectMany(t => t.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly))
                      .Select(m => m.DeclaringType.FullName + "::" + m.Name)
                      .ToHashSet();

                  var covered = XDocument.Load("../MDE_API.Tests/TestResults/Coverage_1.cobertura.xml")
                      .Descendants("method")
                      .Select(m => (string)m.Attribute("name"))
                      .Where(n => !string.IsNullOrWhiteSpace(n))
                      .ToHashSet();

                  var uncovered = publicMethods.Except(covered).ToList();

                  if (uncovered.Any())
                  {
                      Console.WriteLine("‚ùå The following public methods are not covered by tests:");
                      foreach (var method in uncovered)
                          Console.WriteLine(" - " + method);
                      Environment.Exit(1);
                  }
                  else
                  {
                      Console.WriteLine("‚úÖ All public methods are covered by tests.");
                  }
              }
          }
          EOF
          dotnet run

